Git

O que é o Git 
O Git permite que a gente armazene as modificações feitas em cada arquivo em um servidor próprio para isso. Toda a gestão de alterações é feita pelo Git e nós só precisamos nos preocupar em criar código que funcione, e não em quem alterou o que antes.

O que são (e para que servem) sistemas de controle de versões e como eles podem ajudar o nosso fluxo de desenvolvimento?
Permite armazenamento e acesso a um histórico de modificações
Nos ajudam a manter um histórico de alterações;
Nos ajudam a ter controle sobre cada alteração no código;
Nos ajudam para que uma alteração de determinada pessoa não influencie na alteração realizada por outra;

Para que serve o comando git init?
Com o comando git init nós conseguimos criar um repositório Git;
Iniciar um repositório do Git seja inicializado, e para tal usamos o comando git init.

Analisar o estado do nosso repositório 
Através do comando git status.

O que é um commit?
É a forma de salvar um estado ou versão do nosso código;
git commit -m (nome do commit)

Como adicionar arquivos para serem commitados?
Com o comando git add ou git add .

Como verificar o histórico de commits?
Através do git log e algumas de suas opções:
git log --oneline
git log -p
git log --pretty="parametros de formatação"

Como fazer o Git não monitorar arquivos?
Através do .gitignore

O que são repositórios remotos?
Um servidor local/nuvem para onde possamos enviar nossas alterações, que ficarão acessíveis para outras pessoas.

Como criar um repositório Git sem uma cópia dos arquivos?
Usando o comando git init –bare para ser utilizado como servidor local.

Como adicionar links para os repositórios remotos?
Com o comando git remote add url/caminho.


Como baixar um repositório pela primeira vez?
Clonando-o com o comando git clone url/caminho.

Como enviar as nossas alterações para um repositório remoto?
com o comando git push local master.

Como atualizar o nosso repositório com os dados no repositório remoto?
Utilizando o comando git pull local master.

O que é e para que serve o GitHub
É um servidor remoto gratuito, compartilhável pela internet.

Como criar um repositório no GitHub?
git remote add origin url

Como adicionar um repositório do GitHub como repositório remoto.
git push origin master

O que é uma branch?
(ou ramo) é uma linha de commits separada, e que pode ser utilizada para desenvolver funcionalidades independentes;
Que com branches separados, podemos evitar que o código de uma funcionalidade interfira em outra;

Como trazer o trabalho realizado em uma branch para outra branch - exemplo, o master e origin?
Através do comando git merge (add a branch que devemos unir a master) 
Antes de executar o merge, precisamos primeiro ir para a nossa branch master.
Junta os trabalhos e gera um merge commit. 
O git merge gera um novo commit, informando que houve uma mescla entre duas branches.

Como trazer os commits de uma branch para outra
Com o git rebase
Aplica os commits de outra branch na branch atual.
git rebase (add a branch para atualizar no código)
O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual.





Que, para desfazer uma alteração antes de adicioná-la para commit (com git add), podemos utilizar o comando git checkout -- <arquivos>;
Que, para desfazer uma alteração após adicioná-la para commit, antes precisamos executar o git reset HEAD <arquivos> e depois podemos desfazê-las com git checkout -- <arquivos>;
Que, para revertermos as alterações realizadas em um commit, o comando git revert pode ser a solução;
Que o comando git revert gera um novo commit informando que alterações foram desfeitas;
Que, para guardar um trabalho para retomá-lo posteriormente, podemos utilizar o git stash;
Que, para visualizar quais alterações estão na stash, podemos utilizar o comando git stash list;
Que, com o comando git stash apply <numero>, podemos aplicar uma alteração específica da stash;
Que o comando git stash drop <numero> remove determinado item da stash;
Que o comando git stash pop aplica e remove a última alteração que foi adicionada na stash;
Que o git checkout serve para deixar a cópia do código da nossa aplicação no estado que desejarmos:
git checkout <branch> deixa o código no estado de uma branch com o nome <branch>;
git checkout <hash> deixa o código no estado do commit com o hash <hash>.




HEAD: Estado atual do nosso código, ou seja, onde o Git os colocou
Working tree: Local onde os arquivos realmente estão sendo armazenados e editados
index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.



Rebase aplica os commits de outra branch na branch atual.

git checkout nós desfazemos uma alteração que ainda não foi adicionada no arquivo ou stage, ou seja, antes do git add. 
git reset.  Depois de adicionar com git add . para desfazer uma alteração, precisamos tirá-la deste estado, com 
git revert  Agora, se já realizamos o commit, o comando git revert pode nos salvar.

Salvando para depois
git stash conseguimos salvar todas as alterações, no caso, somente o arquivo, para um local temporário, sem necessidade de um commit ou de se gerar um commit para isto.
Podemos utilizar git stash para armazenar temporariamente algumas de nossas alterações.

Voltando no passado
git checkout + hash - Basicamente, podemos deixar o nosso código no estado do último commit de uma branch, de um commit específico, ou mesmo tags.

Exibição das mudanças com o diff
git diff, é possível visualizarmos as mudanças realizadas em determinado código. Podemos ver as diferenças entre commits, branches, etc.
O sinal de subtração (-) antes da linha indica que ela não está mais presente no arquivo. Já o sinal de adição (+) mostra que é uma linha nova. Alterações são representadas por uma remoção e uma adição de linha.

Tag
No Git, é possível utilizar um conceito bastante similar, também denominado tag, capaz de marcar um ponto na aplicação que não pode ser modificado, fixo. Assim, após ser lançada, a versão 0.1 nunca deixará de ser a versão 0.1, e quaisquer alterações que forem feitas nela, serão incluídas na versão posterior.



Que é possível visualizar quais alterações foram realizadas em cada arquivo, com o comando git diff;
Que, digitando apenas git diff, vemos as alterações em nossos arquivos que não foram adicionadas para commit (com git add);
Que é possível comparar as alterações entre duas branches com git diff <branch1>..<branch2>
Que é possível comparar as alterações feitas entre um commit e outro, através do comando git diff <commit1>..<commit2>;
Que o Git nos possibilita salvar marcos da nossa aplicação, como por exemplo, lançamento de versões, através do git tag;
Que o comando git tag -a é utilizado para gerar uma nova tag;
As Releases do GitHub, que são geradas para cada tag do Git criada em nosso repositório.





Comandos

git config --local user.name "Seu nome aqui"
git config --local user.email "seu@email.aqui"
git init
git status (Verifica se o git está enxergando o repositório)
git add index.html
git add . 
git commit -m ”Nome do Commit”
git log
git log –oneline
git log -p    /     https://devhints.io/git-log
git config user.name
git config user.email

Git Ignore
git add gitignore    /   Primeiro façamos um arquivo ignore no IDE  / para os arquivos que não queria mostrar, apenas colocar o nome do arquivo dentro do arquivo gitignore
git commit -m “Add gitignore”

Criar servidor 
git init –bare
git remote add nome  /home/robsonsouza/Documentos/Python3/Servidor/
git remote
git remote -v

Clonar um projeto
git clone /home/robsonsouza/Documentos/Python3/Servidor/ Projeto

Git Pull/Push
git pull local master
git remote
git push local master
git remote rename origin local

Modificar Branch
git branch - só o dono consegue criar uma branch
git branch (um nome)
git checkout (nome da branch)
git checkout -b (nome da branch)
git fetch - atualiza o repositório remoto com o local

Unir duas branchs
git merge (add a branch que se unir a master) - Antes de executar o merge, precisamos primeiro ir para a nossa branch master.
git rebase (add a branch para atualizar no código )
O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual.


Voltando alterações feitas no código
git checkout + (nome do arquivo que salvou a alteração)
git reset HEAD + (nome do arquivo que add para commit)
git revert + (hash - 9664807db969a33e05cf9ddbc09f42e7e408ac85) 

Salva configuração sem efetuar um commit
git stash
git stash list
git stash apply 0
git stash drop - (apaga do histórico)
git stash pop - (traz as alteração)

Voltando no passado
git log --oneline - (log da hash)
git checkout + hash

Analisando os commits realizados
git log -p
git diff
git diff ea539b3 até (..) 6ca12ac = git diff ea539b3 .. 6ca12ac

Tag/release
git tag -a (nome) -m (“uma frase”)	
git tag
git push local master
git push local (tag criada)
git push origin (tag criada)






Comando Github

code . - irá abrir na pasta no visual code
git init
git remote add origin https:t //github.com/diegooliveiraandrade/teste.git
git add .
git commit -m "Mensagem"
git push origin master
git pull origin master
git clone (link do repositório remoto)





